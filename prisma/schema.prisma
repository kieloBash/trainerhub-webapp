generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  TRAINER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  role          UserRole? @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isOnboarded Boolean   @default(false)
  accounts    Account[]

  trainer TrainerProfile?
  trainee UserProfile?

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification-tokens")
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password-reset-tokens")
}

// ACTUAL WEB APP
//    |
//    |
//    |
//    |
//    |
//    |
//   \ /
//    V

model Sport {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  traineeProfile UserToSport[]
  trainerProfile TrainerToSport[]

  @@map("sports")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

//FOR CONNECTING many-many
model UserToSport {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userProfileId String @unique @db.ObjectId
  sportId       String @db.ObjectId

  user  UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  sport Sport       @relation(fields: [sportId], references: [id], onDelete: Cascade)
}

model UserProfile {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  fName             String
  lName             String
  contactNumber     String
  gender            Gender
  location          String
  bio               String
  dob               DateTime
  rating            Int?               @default(0)
  ratingsToTrainer  TrainingRating[]
  favorites         FavoriteTrainer[]
  trainingFeedbacks TrainingFeedback[]

  userId String        @unique @db.ObjectId
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sports UserToSport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user-profile")
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum TrainerLevel {
  AMATEUR
  INTERMEDIATE
  PROFESSIONAL
}

//FOR CONNECTING many-many
model TrainerToSport {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  trainerProfileId String @unique @db.ObjectId
  sportId          String @db.ObjectId

  trainer TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)
  sport   Sport          @relation(fields: [sportId], references: [id], onDelete: Cascade)
}

model TrainerProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  fName         String
  lName         String
  contactNumber String
  gender        Gender
  location      String
  dob           DateTime

  bio           String
  careerPath    String
  highlights    String
  focus         String
  rating        Int?              @default(0)
  ratingsByUser TrainingRating[]
  favoritedBy   FavoriteTrainer[]

  credentials String[] //images

  trainingFeedbacks TrainingFeedback[]
  workDays          DayOfWeek[]
  startTime         String?
  endTime           String?

  userId String           @unique @db.ObjectId
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  sports TrainerToSport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trainer-profile")
}

model FavoriteTrainer {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @db.ObjectId
  trainerId String         @db.ObjectId
  user      UserProfile    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainer   TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, trainerId]) // Ensures a user can favorite a trainer only once
  @@map("favorite-trainer")
}

model TrainingFeedback {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  workoutType String
  description String
  excercises  String
  notes       String

  trainerId String         @unique @db.ObjectId
  trainer   TrainerProfile @relation(fields: [trainerId], references: [id], onDelete: Cascade)

  traineeId String      @unique @db.ObjectId
  trainee   UserProfile @relation(fields: [traineeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("training-feedbacks")
}

model TrainingRating {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  description String
  rating      Int?   @default(0)

  trainerProfileId String         @unique @db.ObjectId
  trainer          TrainerProfile @relation(fields: [trainerProfileId], references: [id], onDelete: Cascade)

  traineeProfileId String      @unique @db.ObjectId
  trainee          UserProfile @relation(fields: [traineeProfileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("training-ratings")
}
