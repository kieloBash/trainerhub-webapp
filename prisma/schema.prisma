generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  TRAINER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  fName         String?
  lName         String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  contactNumber String?
  gender        Gender?
  location      String?
  dateOfBirth   DateTime?
  role          UserRole? @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  isOnboarded Boolean   @default(false)
  accounts    Account[]

  //added
  sport               Sport?        @relation(fields: [sportId], references: [id])
  sportId             String?       @db.ObjectId
  trainerAppointments Appointment[] @relation("TrainerAppointments")
  traineeAppointments Appointment[] @relation("TraineeAppointments")

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification-tokens")
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password-reset-tokens")
}

// ACTUAL WEB APP
//    |
//    |
//    |
//    |
//    |
//    |
//   \ /
//    V

model Sport {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  users User[]

  @@map("sports")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Appointment {
  id     String            @id @default(auto()) @map("_id") @db.ObjectId
  date   DateTime
  status AppointmentStatus @default(PENDING)
  notes  String?

  traineeId String @db.ObjectId
  trainee   User   @relation(fields: [traineeId], references: [id], name: "TraineeAppointments")

  trainerId String @db.ObjectId
  trainer   User   @relation(fields: [trainerId], references: [id], name: "TrainerAppointments")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}
